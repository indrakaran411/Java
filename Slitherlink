public class SlitherlinkSolver {

    private static final int[][] GRID = {
            {0, 0, 0, 2, 0, 0},
            {0, 3, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0},
            {0, 0, 0, 2, 0, 0},
            {0, 0, 3, 0, 0, 0},
            {0, 0, 0, 0, 0, 0}
    };

    private static final int[] DX = {-1, 0, 1, 0};
    private static final int[] DY = {0, 1, 0, -1};

    private static boolean isValid(int[][] grid, int x, int y) {
        return x >= 0 && x < grid.length && y >= 0 && y < grid[0].length;
    }

    private static boolean isBoundary(int[][] grid, int x, int y) {
        return x == 0 || x == grid.length - 1 || y == 0 || y == grid[0].length - 1;
    }

    private static boolean isLoopClosed(int[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isLegalLoop(int[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0 && !visited[i][j] && !dfs(grid, visited, i, j, -1, -1)) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean dfs(int[][] grid, boolean[][] visited, int x, int y, int px, int py) {
        if (!isValid(grid, x, y) || grid[x][y] != 0) {
            return false;
        }
        if (visited[x][y]) {
            return true;
        }
        visited[x][y] = true;
        for (int i = 0; i < 4; i++) {
            int nx = x + DX[i];
            int ny = y + DY[i];
            if (nx == px && ny == py) {
                continue;
            }
            if (!isValid(grid, nx, ny) || grid[nx][ny] != 0 && (nx != px || ny != py)) {
                continue;
            }
            if (!dfs(grid, visited, nx, ny, x, y)) {
                return false;
            }
        }
        return true;
    }

    private static boolean solveSlitherlink(int[][] grid) {
        if (isLoopClosed(grid) && isLegalLoop(grid)) {
            return true;
        }

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = 1;
                    if (solveSlitherlink(grid)) {
                        return true;
                    }
                    grid[i][j] = 0;
                }
            }
        }
        return false;
    }

    private static void printGrid(int[][] grid) {
        for (int[] row : grid) {
            for (int cell : row) {
                System.out.print(cell == 0 ? "-" : cell + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        System.out.println("Original Grid:");
        printGrid(GRID);

        System.out.println("\nSolved Grid:");
        if (solveSlitherlink(GRID)) {
            printGrid(GRID);
        } else {
            System.out.println("No solution exists.");
        }
    }
}
