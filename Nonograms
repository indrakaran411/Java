public class NonogramsSolver {
    private static int[][] rows;
    private static int[][] cols;
    private static char[][] board;

    public static void main(String[] args) {
        rows = new int[][] {
            {3},
            {1,1},
            {1,1},
            {3},
            {2,2}
        };

        cols = new int[][] {
            {1,1},
            {3},
            {2},
            {3},
            {1,1}
        };

        int size = rows.length;
        board = new char[size][size];

        // Initialize board with empty cells
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                board[i][j] = '-';
            }
        }

        // Solve Nonogram puzzle
        solve();

        // Print solved board
        printBoard();
    }

    private static void solve() {
        for (int i = 0; i < rows.length; i++) {
            solveRow(i);
        }
    }

    private static void solveRow(int rowIndex) {
        int size = rows.length;
        int[] rowConstraints = rows[rowIndex];
        int rowLength = rowConstraints.length;
        int[] row = new int[size];
        char[] rowSolution = new char[size];

        // Initialize row with empty cells
        for (int i = 0; i < size; i++) {
            row[i] = 0;
            rowSolution[i] = '-';
        }

        // Try all possible combinations recursively
        solveRowRecursive(rowIndex, 0, row, rowConstraints, rowSolution);
    }

    private static void solveRowRecursive(int rowIndex, int index, int[] row, int[] constraints, char[] rowSolution) {
        if (index >= row.length) {
            if (isValid(row, constraints)) {
                for (int i = 0; i < row.length; i++) {
                    board[rowIndex][i] = rowSolution[i];
                }
            }
            return;
        }

        // Try placing filled cell
        row[index] = 1;
        rowSolution[index] = '#';
        solveRowRecursive(rowIndex, index + 1, row, constraints, rowSolution);

        // Try placing empty cell
        row[index] = 0;
        rowSolution[index] = '-';
        solveRowRecursive(rowIndex, index + 1, row, constraints, rowSolution);
    }

    private static boolean isValid(int[] row, int[] constraints) {
        StringBuilder sb = new StringBuilder();
        for (int i : row) {
            sb.append(i);
        }
        String rowString = sb.toString();
        String[] blocks = rowString.split("0");
        int index = 0;
        for (String block : blocks) {
            if (block.length() != 0 && Integer.parseInt(block) != constraints[index++]) {
                return false;
            }
        }
        return true;
    }

    private static void printBoard() {
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }
}
