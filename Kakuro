public class KakuroSolver {

    private static final int SIZE = 9;
    private static final int EMPTY = 0;

    private static boolean solveKakuro(int[][] puzzle) {
        return solveKakuroUtil(puzzle, 0, 0);
    }

    private static boolean solveKakuroUtil(int[][] puzzle, int row, int col) {
        if (row == SIZE) {
            return true;
        }

        if (col == SIZE) {
            return solveKakuroUtil(puzzle, row + 1, 0);
        }

        if (puzzle[row][col] != EMPTY) {
            return solveKakuroUtil(puzzle, row, col + 1);
        }

        for (int num = 1; num <= 9; num++) {
            if (isValid(puzzle, row, col, num)) {
                puzzle[row][col] = num;
                if (solveKakuroUtil(puzzle, row, col + 1)) {
                    return true;
                }
                puzzle[row][col] = EMPTY;
            }
        }

        return false;
    }

    private static boolean isValid(int[][] puzzle, int row, int col, int num) {
        return isUniqueInRow(puzzle, row, num) &&
               isUniqueInColumn(puzzle, col, num);
    }

    private static boolean isUniqueInRow(int[][] puzzle, int row, int num) {
        for (int col = 0; col < SIZE; col++) {
            if (puzzle[row][col] == num) {
                return false;
            }
        }
        return true;
    }

    private static boolean isUniqueInColumn(int[][] puzzle, int col, int num) {
        for (int row = 0; row < SIZE; row++) {
            if (puzzle[row][col] == num) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[][] puzzle = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

        if (solveKakuro(puzzle)) {
            printSolution(puzzle);
        } else {
            System.out.println("No solution exists.");
        }
    }

    private static void printSolution(int[][] puzzle) {
        for (int[] row : puzzle) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}
